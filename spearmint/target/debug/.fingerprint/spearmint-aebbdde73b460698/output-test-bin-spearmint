{"message":"unused variable: `branch`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/branches.rs","byte_start":90,"byte_end":96,"line_start":5,"line_end":5,"column_start":24,"column_end":30,"is_primary":true,"text":[{"text":"pub fn is_branch_owned(branch: &'static str) -> bool {","highlight_start":24,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/branches.rs","byte_start":90,"byte_end":96,"line_start":5,"line_end":5,"column_start":24,"column_end":30,"is_primary":true,"text":[{"text":"pub fn is_branch_owned(branch: &'static str) -> bool {","highlight_start":24,"highlight_end":30}],"label":null,"suggested_replacement":"_branch","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `branch`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/branches.rs:5:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn is_branch_owned(branch: &'static str) -> bool {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_branch`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `branch`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/branches.rs","byte_start":163,"byte_end":169,"line_start":9,"line_end":9,"column_start":30,"column_end":36,"is_primary":true,"text":[{"text":"pub fn get_commit_for_branch(branch: &'static str) -> &'static str {","highlight_start":30,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/branches.rs","byte_start":163,"byte_end":169,"line_start":9,"line_end":9,"column_start":30,"column_end":36,"is_primary":true,"text":[{"text":"pub fn get_commit_for_branch(branch: &'static str) -> &'static str {","highlight_start":30,"highlight_end":36}],"label":null,"suggested_replacement":"_branch","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `branch`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/branches.rs:9:30\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn get_commit_for_branch(branch: &'static str) -> &'static str {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_branch`\u001b[0m\n\n"}
{"message":"unused variable: `branchNames`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/tree.rs","byte_start":1294,"byte_end":1305,"line_start":33,"line_end":33,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn generate_parents_and_branches(branchNames: Vec<&'static str>) -> (HashMap<&'static str, Option<&'static str>>, HashMap<&'static str, Vec<&'static str>>, HashMap<&'static str, (&'static str, &'static str)>) {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/tree.rs","byte_start":1294,"byte_end":1305,"line_start":33,"line_end":33,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn generate_parents_and_branches(branchNames: Vec<&'static str>) -> (HashMap<&'static str, Option<&'static str>>, HashMap<&'static str, Vec<&'static str>>, HashMap<&'static str, (&'static str, &'static str)>) {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"_branchNames","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `branchNames`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tree.rs:33:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn generate_parents_and_branches(branchNames: Vec<&'static str>) -> (HashMap<&'static str, Option<&'static str>>, HashMap<&'static st\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_branchNames`\u001b[0m\n\n"}
{"message":"variable `branchNames` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/tree.rs","byte_start":288,"byte_end":299,"line_start":16,"line_end":16,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let branchNames = branches::get_all_branches();","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/tree.rs","byte_start":288,"byte_end":299,"line_start":16,"line_end":16,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let branchNames = branches::get_all_branches();","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":"branch_names","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `branchNames` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tree.rs:16:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let branchNames = branches::get_all_branches();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `branch_names`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"message":"variable `branchesToParents` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/tree.rs","byte_start":419,"byte_end":436,"line_start":18,"line_end":18,"column_start":14,"column_end":31,"is_primary":true,"text":[{"text":"        let (branchesToParents, parentsToBranches, uniqueHashes) = Self::generate_parents_and_branches(branchNames);","highlight_start":14,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/tree.rs","byte_start":419,"byte_end":436,"line_start":18,"line_end":18,"column_start":14,"column_end":31,"is_primary":true,"text":[{"text":"        let (branchesToParents, parentsToBranches, uniqueHashes) = Self::generate_parents_and_branches(branchNames);","highlight_start":14,"highlight_end":31}],"label":null,"suggested_replacement":"branches_to_parents","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `branchesToParents` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tree.rs:18:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (branchesToParents, parentsToBranches, uniqueHashes) = Self::generate_parents_and_branches(branchNames);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `branches_to_parents`\u001b[0m\n\n"}
{"message":"variable `parentsToBranches` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/tree.rs","byte_start":438,"byte_end":455,"line_start":18,"line_end":18,"column_start":33,"column_end":50,"is_primary":true,"text":[{"text":"        let (branchesToParents, parentsToBranches, uniqueHashes) = Self::generate_parents_and_branches(branchNames);","highlight_start":33,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/tree.rs","byte_start":438,"byte_end":455,"line_start":18,"line_end":18,"column_start":33,"column_end":50,"is_primary":true,"text":[{"text":"        let (branchesToParents, parentsToBranches, uniqueHashes) = Self::generate_parents_and_branches(branchNames);","highlight_start":33,"highlight_end":50}],"label":null,"suggested_replacement":"parents_to_branches","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `parentsToBranches` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tree.rs:18:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (branchesToParents, parentsToBranches, uniqueHashes) = Self::generate_parents_and_branches(branchNames);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `parents_to_branches`\u001b[0m\n\n"}
{"message":"variable `uniqueHashes` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/tree.rs","byte_start":457,"byte_end":469,"line_start":18,"line_end":18,"column_start":52,"column_end":64,"is_primary":true,"text":[{"text":"        let (branchesToParents, parentsToBranches, uniqueHashes) = Self::generate_parents_and_branches(branchNames);","highlight_start":52,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/tree.rs","byte_start":457,"byte_end":469,"line_start":18,"line_end":18,"column_start":52,"column_end":64,"is_primary":true,"text":[{"text":"        let (branchesToParents, parentsToBranches, uniqueHashes) = Self::generate_parents_and_branches(branchNames);","highlight_start":52,"highlight_end":64}],"label":null,"suggested_replacement":"unique_hashes","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `uniqueHashes` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tree.rs:18:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (branchesToParents, parentsToBranches, uniqueHashes) = Self::generate_parents_and_branches(branchNames);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `unique_hashes`\u001b[0m\n\n"}
{"message":"variable `branchNames` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/tree.rs","byte_start":644,"byte_end":655,"line_start":21,"line_end":21,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let branchNames = branches::get_all_branches();","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/tree.rs","byte_start":644,"byte_end":655,"line_start":21,"line_end":21,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let branchNames = branches::get_all_branches();","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":"branch_names","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `branchNames` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tree.rs:21:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let branchNames = branches::get_all_branches();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `branch_names`\u001b[0m\n\n"}
{"message":"variable `branchNames` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/tree.rs","byte_start":1294,"byte_end":1305,"line_start":33,"line_end":33,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn generate_parents_and_branches(branchNames: Vec<&'static str>) -> (HashMap<&'static str, Option<&'static str>>, HashMap<&'static str, Vec<&'static str>>, HashMap<&'static str, (&'static str, &'static str)>) {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/tree.rs","byte_start":1294,"byte_end":1305,"line_start":33,"line_end":33,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn generate_parents_and_branches(branchNames: Vec<&'static str>) -> (HashMap<&'static str, Option<&'static str>>, HashMap<&'static str, Vec<&'static str>>, HashMap<&'static str, (&'static str, &'static str)>) {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"branch_names","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `branchNames` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tree.rs:33:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn generate_parents_and_branches(branchNames: Vec<&'static str>) -> (HashMap<&'static str, Option<&'static str>>, HashMap<&'static st\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `branch_names`\u001b[0m\n\n"}
{"message":"9 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 9 warnings emitted\u001b[0m\n\n"}
